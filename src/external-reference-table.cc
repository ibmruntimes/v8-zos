// Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/external-reference-table.h"

#include "src/accessors.h"
#include "src/assembler.h"
#include "src/counters.h"
#include "src/deoptimizer.h"
#include "src/ic/stub-cache.h"

namespace v8 {
namespace internal {

ExternalReferenceTable* ExternalReferenceTable::instance(Isolate* isolate) {
  ExternalReferenceTable* external_reference_table =
      isolate->external_reference_table();
  if (external_reference_table == NULL) {
    external_reference_table = new ExternalReferenceTable(isolate);
    isolate->set_external_reference_table(external_reference_table);
  }
  return external_reference_table;
}

ExternalReferenceTable::ExternalReferenceTable(Isolate* isolate) {
  // Miscellaneous
  Add(ExternalReference::roots_array_start(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x72\x6f\x6f\x74\x73\x5f\x61\x72\x72\x61\x79\x5f\x73\x74\x61\x72\x74\x28\x29");
  Add(ExternalReference::address_of_stack_limit(isolate).address(),
      "\x53\x74\x61\x63\x6b\x47\x75\x61\x72\x64\x3a\x3a\x61\x64\x64\x72\x65\x73\x73\x5f\x6f\x66\x5f\x6a\x73\x6c\x69\x6d\x69\x74\x28\x29");
  Add(ExternalReference::address_of_real_stack_limit(isolate).address(),
      "\x53\x74\x61\x63\x6b\x47\x75\x61\x72\x64\x3a\x3a\x61\x64\x64\x72\x65\x73\x73\x5f\x6f\x66\x5f\x72\x65\x61\x6c\x5f\x6a\x73\x6c\x69\x6d\x69\x74\x28\x29");
  Add(ExternalReference::new_space_allocation_limit_address(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x4e\x65\x77\x53\x70\x61\x63\x65\x41\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x4c\x69\x6d\x69\x74\x41\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::new_space_allocation_top_address(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x4e\x65\x77\x53\x70\x61\x63\x65\x41\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x54\x6f\x70\x41\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::mod_two_doubles_operation(isolate).address(),
      "\x6d\x6f\x64\x5f\x74\x77\x6f\x5f\x64\x6f\x75\x62\x6c\x65\x73");
  // Keyed lookup cache.
  Add(ExternalReference::keyed_lookup_cache_keys(isolate).address(),
      "\x4b\x65\x79\x65\x64\x4c\x6f\x6f\x6b\x75\x70\x43\x61\x63\x68\x65\x3a\x3a\x6b\x65\x79\x73\x28\x29");
  Add(ExternalReference::keyed_lookup_cache_field_offsets(isolate).address(),
      "\x4b\x65\x79\x65\x64\x4c\x6f\x6f\x6b\x75\x70\x43\x61\x63\x68\x65\x3a\x3a\x66\x69\x65\x6c\x64\x5f\x6f\x66\x66\x73\x65\x74\x73\x28\x29");
  Add(ExternalReference::handle_scope_next_address(isolate).address(),
      "\x48\x61\x6e\x64\x6c\x65\x53\x63\x6f\x70\x65\x3a\x3a\x6e\x65\x78\x74");
  Add(ExternalReference::handle_scope_limit_address(isolate).address(),
      "\x48\x61\x6e\x64\x6c\x65\x53\x63\x6f\x70\x65\x3a\x3a\x6c\x69\x6d\x69\x74");
  Add(ExternalReference::handle_scope_level_address(isolate).address(),
      "\x48\x61\x6e\x64\x6c\x65\x53\x63\x6f\x70\x65\x3a\x3a\x6c\x65\x76\x65\x6c");
  Add(ExternalReference::new_deoptimizer_function(isolate).address(),
      "\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x72\x3a\x3a\x4e\x65\x77\x28\x29");
  Add(ExternalReference::compute_output_frames_function(isolate).address(),
      "\x44\x65\x6f\x70\x74\x69\x6d\x69\x7a\x65\x72\x3a\x3a\x43\x6f\x6d\x70\x75\x74\x65\x4f\x75\x74\x70\x75\x74\x46\x72\x61\x6d\x65\x73\x28\x29");
  Add(ExternalReference::address_of_min_int().address(),
      "\x4c\x44\x6f\x75\x62\x6c\x65\x43\x6f\x6e\x73\x74\x61\x6e\x74\x3a\x3a\x6d\x69\x6e\x5f\x69\x6e\x74");
  Add(ExternalReference::address_of_one_half().address(),
      "\x4c\x44\x6f\x75\x62\x6c\x65\x43\x6f\x6e\x73\x74\x61\x6e\x74\x3a\x3a\x6f\x6e\x65\x5f\x68\x61\x6c\x66");
  Add(ExternalReference::isolate_address(isolate).address(), "\x69\x73\x6f\x6c\x61\x74\x65");
  Add(ExternalReference::interpreter_dispatch_table_address(isolate).address(),
      "\x49\x6e\x74\x65\x72\x70\x72\x65\x74\x65\x72\x3a\x3a\x64\x69\x73\x70\x61\x74\x63\x68\x5f\x74\x61\x62\x6c\x65\x5f\x61\x64\x64\x72\x65\x73\x73");
  Add(ExternalReference::address_of_negative_infinity().address(),
      "\x4c\x44\x6f\x75\x62\x6c\x65\x43\x6f\x6e\x73\x74\x61\x6e\x74\x3a\x3a\x6e\x65\x67\x61\x74\x69\x76\x65\x5f\x69\x6e\x66\x69\x6e\x69\x74\x79");
  Add(ExternalReference::power_double_double_function(isolate).address(),
      "\x70\x6f\x77\x65\x72\x5f\x64\x6f\x75\x62\x6c\x65\x5f\x64\x6f\x75\x62\x6c\x65\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e");
  Add(ExternalReference::power_double_int_function(isolate).address(),
      "\x70\x6f\x77\x65\x72\x5f\x64\x6f\x75\x62\x6c\x65\x5f\x69\x6e\x74\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e");
  Add(ExternalReference::math_log_double_function(isolate).address(),
      "\x73\x74\x64\x3a\x3a\x6c\x6f\x67");
  Add(ExternalReference::store_buffer_top(isolate).address(),
      "\x73\x74\x6f\x72\x65\x5f\x62\x75\x66\x66\x65\x72\x5f\x74\x6f\x70");
  Add(ExternalReference::address_of_the_hole_nan().address(), "\x74\x68\x65\x5f\x68\x6f\x6c\x65\x5f\x6e\x61\x6e");
  Add(ExternalReference::get_date_field_function(isolate).address(),
      "\x4a\x53\x44\x61\x74\x65\x3a\x3a\x47\x65\x74\x46\x69\x65\x6c\x64");
  Add(ExternalReference::date_cache_stamp(isolate).address(),
      "\x64\x61\x74\x65\x5f\x63\x61\x63\x68\x65\x5f\x73\x74\x61\x6d\x70");
  Add(ExternalReference::address_of_pending_message_obj(isolate).address(),
      "\x61\x64\x64\x72\x65\x73\x73\x5f\x6f\x66\x5f\x70\x65\x6e\x64\x69\x6e\x67\x5f\x6d\x65\x73\x73\x61\x67\x65\x5f\x6f\x62\x6a");
  Add(ExternalReference::get_make_code_young_function(isolate).address(),
      "\x43\x6f\x64\x65\x3a\x3a\x4d\x61\x6b\x65\x43\x6f\x64\x65\x59\x6f\x75\x6e\x67");
  Add(ExternalReference::cpu_features().address(), "\x63\x70\x75\x5f\x66\x65\x61\x74\x75\x72\x65\x73");
  Add(ExternalReference::old_space_allocation_top_address(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x4f\x6c\x64\x53\x70\x61\x63\x65\x41\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x54\x6f\x70\x41\x64\x64\x72\x65\x73\x73");
  Add(ExternalReference::old_space_allocation_limit_address(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x4f\x6c\x64\x53\x70\x61\x63\x65\x41\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x4c\x69\x6d\x69\x74\x41\x64\x64\x72\x65\x73\x73");
  Add(ExternalReference::allocation_sites_list_address(isolate).address(),
      "\x48\x65\x61\x70\x3a\x3a\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x5f\x73\x69\x74\x65\x73\x5f\x6c\x69\x73\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::address_of_uint32_bias().address(), "\x75\x69\x6e\x74\x33\x32\x5f\x62\x69\x61\x73");
  Add(ExternalReference::get_mark_code_as_executed_function(isolate).address(),
      "\x43\x6f\x64\x65\x3a\x3a\x4d\x61\x72\x6b\x43\x6f\x64\x65\x41\x73\x45\x78\x65\x63\x75\x74\x65\x64");
  Add(ExternalReference::is_profiling_address(isolate).address(),
      "\x43\x70\x75\x50\x72\x6f\x66\x69\x6c\x65\x72\x3a\x3a\x69\x73\x5f\x70\x72\x6f\x66\x69\x6c\x69\x6e\x67");
  Add(ExternalReference::scheduled_exception_address(isolate).address(),
      "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a\x73\x63\x68\x65\x64\x75\x6c\x65\x64\x5f\x65\x78\x63\x65\x70\x74\x69\x6f\x6e");
  Add(ExternalReference::invoke_function_callback(isolate).address(),
      "\x49\x6e\x76\x6f\x6b\x65\x46\x75\x6e\x63\x74\x69\x6f\x6e\x43\x61\x6c\x6c\x62\x61\x63\x6b");
  Add(ExternalReference::invoke_accessor_getter_callback(isolate).address(),
      "\x49\x6e\x76\x6f\x6b\x65\x41\x63\x63\x65\x73\x73\x6f\x72\x47\x65\x74\x74\x65\x72\x43\x61\x6c\x6c\x62\x61\x63\x6b");
  Add(ExternalReference::wasm_f32_trunc(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x33\x32\x5f\x74\x72\x75\x6e\x63\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f32_floor(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x33\x32\x5f\x66\x6c\x6f\x6f\x72\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f32_ceil(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x33\x32\x5f\x63\x65\x69\x6c\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f32_nearest_int(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x33\x32\x5f\x6e\x65\x61\x72\x65\x73\x74\x5f\x69\x6e\x74\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f64_trunc(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x36\x34\x5f\x74\x72\x75\x6e\x63\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f64_floor(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x36\x34\x5f\x66\x6c\x6f\x6f\x72\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f64_ceil(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x36\x34\x5f\x63\x65\x69\x6c\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_f64_nearest_int(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x36\x34\x5f\x6e\x65\x61\x72\x65\x73\x74\x5f\x69\x6e\x74\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_int64_to_float32(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x69\x6e\x74\x36\x34\x5f\x74\x6f\x5f\x66\x6c\x6f\x61\x74\x33\x32\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_uint64_to_float32(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x75\x69\x6e\x74\x36\x34\x5f\x74\x6f\x5f\x66\x6c\x6f\x61\x74\x33\x32\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_int64_to_float64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x69\x6e\x74\x36\x34\x5f\x74\x6f\x5f\x66\x6c\x6f\x61\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_uint64_to_float64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x75\x69\x6e\x74\x36\x34\x5f\x74\x6f\x5f\x66\x6c\x6f\x61\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_float32_to_int64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x6c\x6f\x61\x74\x33\x32\x5f\x74\x6f\x5f\x69\x6e\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_float32_to_uint64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x6c\x6f\x61\x74\x33\x32\x5f\x74\x6f\x5f\x75\x69\x6e\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_float64_to_int64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x6c\x6f\x61\x74\x36\x34\x5f\x74\x6f\x5f\x69\x6e\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_float64_to_uint64(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x66\x6c\x6f\x61\x74\x36\x34\x5f\x74\x6f\x5f\x75\x69\x6e\x74\x36\x34\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::wasm_int64_div(isolate).address(), "\x77\x61\x73\x6d\x3a\x3a\x69\x6e\x74\x36\x34\x5f\x64\x69\x76");
  Add(ExternalReference::wasm_int64_mod(isolate).address(), "\x77\x61\x73\x6d\x3a\x3a\x69\x6e\x74\x36\x34\x5f\x6d\x6f\x64");
  Add(ExternalReference::wasm_uint64_div(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x75\x69\x6e\x74\x36\x34\x5f\x64\x69\x76");
  Add(ExternalReference::wasm_uint64_mod(isolate).address(),
      "\x77\x61\x73\x6d\x3a\x3a\x75\x69\x6e\x74\x36\x34\x5f\x6d\x6f\x64");
  Add(ExternalReference::f64_acos_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x61\x63\x6f\x73\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_asin_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x61\x73\x69\x6e\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_atan_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x61\x74\x61\x6e\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_cos_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x63\x6f\x73\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_sin_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x73\x69\x6e\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_tan_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x74\x61\x6e\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_exp_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x65\x78\x70\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_log_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x6c\x6f\x67\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_pow_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x70\x6f\x77\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_atan2_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x61\x74\x61\x6e\x32\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::f64_mod_wrapper_function(isolate).address(),
      "\x66\x36\x34\x5f\x6d\x6f\x64\x5f\x77\x72\x61\x70\x70\x65\x72");
  Add(ExternalReference::log_enter_external_function(isolate).address(),
      "\x4c\x6f\x67\x67\x65\x72\x3a\x3a\x45\x6e\x74\x65\x72\x45\x78\x74\x65\x72\x6e\x61\x6c");
  Add(ExternalReference::log_leave_external_function(isolate).address(),
      "\x4c\x6f\x67\x67\x65\x72\x3a\x3a\x4c\x65\x61\x76\x65\x45\x78\x74\x65\x72\x6e\x61\x6c");
  Add(ExternalReference::address_of_minus_one_half().address(),
      "\x64\x6f\x75\x62\x6c\x65\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\x73\x2e\x6d\x69\x6e\x75\x73\x5f\x6f\x6e\x65\x5f\x68\x61\x6c\x66");
  Add(ExternalReference::stress_deopt_count(isolate).address(),
      "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a\x73\x74\x72\x65\x73\x73\x5f\x64\x65\x6f\x70\x74\x5f\x63\x6f\x75\x6e\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::virtual_handler_register(isolate).address(),
      "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a\x76\x69\x72\x74\x75\x61\x6c\x5f\x68\x61\x6e\x64\x6c\x65\x72\x5f\x72\x65\x67\x69\x73\x74\x65\x72\x28\x29");
  Add(ExternalReference::virtual_slot_register(isolate).address(),
      "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a\x76\x69\x72\x74\x75\x61\x6c\x5f\x73\x6c\x6f\x74\x5f\x72\x65\x67\x69\x73\x74\x65\x72\x28\x29");
  Add(ExternalReference::runtime_function_table_address(isolate).address(),
      "\x52\x75\x6e\x74\x69\x6d\x65\x3a\x3a\x72\x75\x6e\x74\x69\x6d\x65\x5f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x5f\x74\x61\x62\x6c\x65\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::is_tail_call_elimination_enabled_address(isolate)
          .address(),
      "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a\x69\x73\x5f\x74\x61\x69\x6c\x5f\x63\x61\x6c\x6c\x5f\x65\x6c\x69\x6d\x69\x6e\x61\x74\x69\x6f\x6e\x5f\x65\x6e\x61\x62\x6c\x65\x64\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");

  // Debug addresses
  Add(ExternalReference::debug_after_break_target_address(isolate).address(),
      "\x44\x65\x62\x75\x67\x3a\x3a\x61\x66\x74\x65\x72\x5f\x62\x72\x65\x61\x6b\x5f\x74\x61\x72\x67\x65\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::debug_is_active_address(isolate).address(),
      "\x44\x65\x62\x75\x67\x3a\x3a\x69\x73\x5f\x61\x63\x74\x69\x76\x65\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::debug_step_in_enabled_address(isolate).address(),
      "\x44\x65\x62\x75\x67\x3a\x3a\x73\x74\x65\x70\x5f\x69\x6e\x5f\x65\x6e\x61\x62\x6c\x65\x64\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");

#ifndef V8_INTERPRETED_REGEXP
  Add(ExternalReference::re_case_insensitive_compare_uc16(isolate).address(),
      "\x4e\x61\x74\x69\x76\x65\x52\x65\x67\x45\x78\x70\x4d\x61\x63\x72\x6f\x41\x73\x73\x65\x6d\x62\x6c\x65\x72\x3a\x3a\x43\x61\x73\x65\x49\x6e\x73\x65\x6e\x73\x69\x74\x69\x76\x65\x43\x6f\x6d\x70\x61\x72\x65\x55\x43\x31\x36\x28\x29");
  Add(ExternalReference::re_check_stack_guard_state(isolate).address(),
      "\x52\x65\x67\x45\x78\x70\x4d\x61\x63\x72\x6f\x41\x73\x73\x65\x6d\x62\x6c\x65\x72\x2a\x3a\x3a\x43\x68\x65\x63\x6b\x53\x74\x61\x63\x6b\x47\x75\x61\x72\x64\x53\x74\x61\x74\x65\x28\x29");
  Add(ExternalReference::re_grow_stack(isolate).address(),
      "\x4e\x61\x74\x69\x76\x65\x52\x65\x67\x45\x78\x70\x4d\x61\x63\x72\x6f\x41\x73\x73\x65\x6d\x62\x6c\x65\x72\x3a\x3a\x47\x72\x6f\x77\x53\x74\x61\x63\x6b\x28\x29");
  Add(ExternalReference::re_word_character_map().address(),
      "\x4e\x61\x74\x69\x76\x65\x52\x65\x67\x45\x78\x70\x4d\x61\x63\x72\x6f\x41\x73\x73\x65\x6d\x62\x6c\x65\x72\x3a\x3a\x77\x6f\x72\x64\x5f\x63\x68\x61\x72\x61\x63\x74\x65\x72\x5f\x6d\x61\x70");
  Add(ExternalReference::address_of_regexp_stack_limit(isolate).address(),
      "\x52\x65\x67\x45\x78\x70\x53\x74\x61\x63\x6b\x3a\x3a\x6c\x69\x6d\x69\x74\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::address_of_regexp_stack_memory_address(isolate)
          .address(),
      "\x52\x65\x67\x45\x78\x70\x53\x74\x61\x63\x6b\x3a\x3a\x6d\x65\x6d\x6f\x72\x79\x5f\x61\x64\x64\x72\x65\x73\x73\x28\x29");
  Add(ExternalReference::address_of_regexp_stack_memory_size(isolate).address(),
      "\x52\x65\x67\x45\x78\x70\x53\x74\x61\x63\x6b\x3a\x3a\x6d\x65\x6d\x6f\x72\x79\x5f\x73\x69\x7a\x65\x28\x29");
  Add(ExternalReference::address_of_static_offsets_vector(isolate).address(),
      "\x4f\x66\x66\x73\x65\x74\x73\x56\x65\x63\x74\x6f\x72\x3a\x3a\x73\x74\x61\x74\x69\x63\x5f\x6f\x66\x66\x73\x65\x74\x73\x5f\x76\x65\x63\x74\x6f\x72");
#endif  // V8_INTERPRETED_REGEXP

  // The following populates all of the different type of external references
  // into the ExternalReferenceTable.
  //
  // NOTE: This function was originally 100k of code.  It has since been
  // rewritten to be mostly table driven, as the callback macro style tends to
  // very easily cause code bloat.  Please be careful in the future when adding
  // new references.

  struct RefTableEntry {
    uint16_t id;
    const char* name;
  };

  static const RefTableEntry c_builtins[] = {
#define DEF_ENTRY_C(name, ignored) {Builtins::c_##name, "\x42\x75\x69\x6c\x74\x69\x6e\x73\x3a\x3a" USTR(#name)},
      BUILTIN_LIST_C(DEF_ENTRY_C)
#undef DEF_ENTRY_C
  };

  for (unsigned i = 0; i < arraysize(c_builtins); ++i) {
    ExternalReference ref(static_cast<Builtins::CFunctionId>(c_builtins[i].id),
                          isolate);
    Add(ref.address(), c_builtins[i].name);
  }

  static const RefTableEntry builtins[] = {
#define DEF_ENTRY_C(name, ignored) {Builtins::k##name, "\x42\x75\x69\x6c\x74\x69\x6e\x73\x3a\x3a" USTR(#name)},
#define DEF_ENTRY_A(name, i1, i2, i3) {Builtins::k##name, "\x42\x75\x69\x6c\x74\x69\x6e\x73\x3a\x3a" USTR(#name)},
      BUILTIN_LIST_C(DEF_ENTRY_C) BUILTIN_LIST_A(DEF_ENTRY_A)
          BUILTIN_LIST_DEBUG_A(DEF_ENTRY_A)
#undef DEF_ENTRY_C
#undef DEF_ENTRY_A
  };

  for (unsigned i = 0; i < arraysize(builtins); ++i) {
    ExternalReference ref(static_cast<Builtins::Name>(builtins[i].id), isolate);
    Add(ref.address(), builtins[i].name);
  }

  static const RefTableEntry runtime_functions[] = {
#define RUNTIME_ENTRY(name, i1, i2) {Runtime::k##name, "\x52\x75\x6e\x74\x69\x6d\x65\x3a\x3a" USTR(#name)},
      FOR_EACH_INTRINSIC(RUNTIME_ENTRY)
#undef RUNTIME_ENTRY
  };

  for (unsigned i = 0; i < arraysize(runtime_functions); ++i) {
    ExternalReference ref(
        static_cast<Runtime::FunctionId>(runtime_functions[i].id), isolate);
    Add(ref.address(), runtime_functions[i].name);
  }

  // Stat counters
  struct StatsRefTableEntry {
    StatsCounter* (Counters::*counter)();
    const char* name;
  };

  static const StatsRefTableEntry stats_ref_table[] = {
#define COUNTER_ENTRY(name, caption) {&Counters::name, "\x43\x6f\x75\x6e\x74\x65\x72\x73\x3a\x3a" USTR(#name)},
      STATS_COUNTER_LIST_1(COUNTER_ENTRY) STATS_COUNTER_LIST_2(COUNTER_ENTRY)
#undef COUNTER_ENTRY
  };
/*
  Counters* counters = isolate->counters();
  for (unsigned i = 0; i < arraysize(stats_ref_table); ++i) {
    // To make sure the indices are not dependent on whether counters are
    // enabled, use a dummy address as filler.
    Address address = NotAvailable();
    StatsCounter* counter = (counters->*(stats_ref_table[i].counter))();
    if (counter->Enabled()) {
      address = reinterpret_cast<Address>(counter->GetInternalPointer());
    }
    Add(address, stats_ref_table[i].name);
  }
*/
  // Top addresses
  static const char* address_names[] = {
#define BUILD_NAME_LITERAL(Name, name) "\x49\x73\x6f\x6c\x61\x74\x65\x3a\x3a" USTR(#name) "\x5f\x61\x64\x64\x72\x65\x73\x73",
      FOR_EACH_ISOLATE_ADDRESS_NAME(BUILD_NAME_LITERAL) NULL
#undef BUILD_NAME_LITERAL
  };

  for (int i = 0; i < Isolate::kIsolateAddressCount; ++i) {
    Add(isolate->get_address_from_id(static_cast<Isolate::AddressId>(i)),
        address_names[i]);
  }

  // Accessors
  struct AccessorRefTable {
    Address address;
    const char* name;
  };

  static const AccessorRefTable accessors[] = {
#define ACCESSOR_INFO_DECLARATION(name) \
  {FUNCTION_ADDR(&Accessors::name##Getter), "\x41\x63\x63\x65\x73\x73\x6f\x72\x73\x3a\x3a" USTR(#name) "\x47\x65\x74\x74\x65\x72"},
      ACCESSOR_INFO_LIST(ACCESSOR_INFO_DECLARATION)
#undef ACCESSOR_INFO_DECLARATION
#define ACCESSOR_SETTER_DECLARATION(name) \
  {FUNCTION_ADDR(&Accessors::name), "\x41\x63\x63\x65\x73\x73\x6f\x72\x73\x3a\x3a" USTR(#name)},
          ACCESSOR_SETTER_LIST(ACCESSOR_SETTER_DECLARATION)
#undef ACCESSOR_INFO_DECLARATION
  };

  for (unsigned i = 0; i < arraysize(accessors); ++i) {
    Add(accessors[i].address, accessors[i].name);
  }

  StubCache* stub_cache = isolate->stub_cache();

  // Stub cache tables
  Add(stub_cache->key_reference(StubCache::kPrimary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x70\x72\x69\x6d\x61\x72\x79\x5f\x2d\x3e\x6b\x65\x79");
  Add(stub_cache->value_reference(StubCache::kPrimary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x70\x72\x69\x6d\x61\x72\x79\x5f\x2d\x3e\x76\x61\x6c\x75\x65");
  Add(stub_cache->map_reference(StubCache::kPrimary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x70\x72\x69\x6d\x61\x72\x79\x5f\x2d\x3e\x6d\x61\x70");
  Add(stub_cache->key_reference(StubCache::kSecondary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x73\x65\x63\x6f\x6e\x64\x61\x72\x79\x5f\x2d\x3e\x6b\x65\x79");
  Add(stub_cache->value_reference(StubCache::kSecondary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x73\x65\x63\x6f\x6e\x64\x61\x72\x79\x5f\x2d\x3e\x76\x61\x6c\x75\x65");
  Add(stub_cache->map_reference(StubCache::kSecondary).address(),
      "\x53\x74\x75\x62\x43\x61\x63\x68\x65\x3a\x3a\x73\x65\x63\x6f\x6e\x64\x61\x72\x79\x5f\x2d\x3e\x6d\x61\x70");

  // Runtime entries
  Add(ExternalReference::delete_handle_scope_extensions(isolate).address(),
      "\x48\x61\x6e\x64\x6c\x65\x53\x63\x6f\x70\x65\x3a\x3a\x44\x65\x6c\x65\x74\x65\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x73");
  Add(ExternalReference::incremental_marking_record_write_function(isolate)
          .address(),
      "\x49\x6e\x63\x72\x65\x6d\x65\x6e\x74\x61\x6c\x4d\x61\x72\x6b\x69\x6e\x67\x3a\x3a\x52\x65\x63\x6f\x72\x64\x57\x72\x69\x74\x65");
  Add(ExternalReference::incremental_marking_record_write_code_entry_function(
          isolate)
          .address(),
      "\x49\x6e\x63\x72\x65\x6d\x65\x6e\x74\x61\x6c\x4d\x61\x72\x6b\x69\x6e\x67\x3a\x3a\x52\x65\x63\x6f\x72\x64\x57\x72\x69\x74\x65\x4f\x66\x43\x6f\x64\x65\x45\x6e\x74\x72\x79\x46\x72\x6f\x6d\x43\x6f\x64\x65");
  Add(ExternalReference::store_buffer_overflow_function(isolate).address(),
      "\x53\x74\x6f\x72\x65\x42\x75\x66\x66\x65\x72\x3a\x3a\x53\x74\x6f\x72\x65\x42\x75\x66\x66\x65\x72\x4f\x76\x65\x72\x66\x6c\x6f\x77");

  // Add a small set of deopt entry addresses to encoder without generating the
  // deopt table code, which isn't possible at deserialization time.
  HandleScope scope(isolate);
  for (int entry = 0; entry < kDeoptTableSerializeEntryCount; ++entry) {
    Address address = Deoptimizer::GetDeoptimizationEntry(
        isolate, entry, Deoptimizer::LAZY,
        Deoptimizer::CALCULATE_ENTRY_ADDRESS);
    Add(address, "\x6c\x61\x7a\x79\x5f\x64\x65\x6f\x70\x74");
  }
}

}  // namespace internal
}  // namespace v8
